
R version 4.4.2 (2024-10-31 ucrt) -- "Pile of Leaves"
Copyright (C) 2024 The R Foundation for Statistical Computing
Platform: x86_64-w64-mingw32/x64

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> pkgname <- "DIBclust"
> source(file.path(R.home("share"), "R", "examples-header.R"))
> options(warn = 1)
> options(pager = "console")
> library('DIBclust')
> 
> base::assign(".oldSearch", base::search(), pos = 'CheckExEnv')
> base::assign(".old_wd", base::getwd(), pos = 'CheckExEnv')
> cleanEx()
> nameEx("DIBcat")
> ### * DIBcat
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: DIBcat
> ### Title: Cluster Categorical Data Using the Deterministic Information
> ###   Bottleneck Algorithm
> ### Aliases: DIBcat
> ### Keywords: clustering
> 
> ### ** Examples
> 
> # Simulated categorical data
> set.seed(123)
> X <- data.frame(
+   Var1 = as.factor(sample(letters[1:3], 200, replace = TRUE)),  # Nominal variable
+   Var2 = as.factor(sample(letters[4:6], 200, replace = TRUE)),  # Nominal variable
+   Var3 = factor(sample(c("low", "medium", "high"), 200, replace = TRUE),
+                 levels = c("low", "medium", "high"), ordered = TRUE)  # Ordinal variable
+ )
> 
> # Run DIBcat with automatic lambda selection and multiple initializations
> result <- DIBcat(X = X, ncl = 3, lambda = -1, nstart = 50)
1 cluster(s) dropped. Down to 2 cluster(s).

> 
> # Print clustering results
> print(result$Cluster)       # Cluster assignments
  [1] 3 2 3 2 3 3 3 3 3 3 2 3 1 3 3 3 3 2 3 1 3 1 3 3 3 3 3 3 2 2 1 3 3 1 2 3 1
 [38] 3 1 1 3 3 3 1 2 3 2 2 1 3 1 1 3 3 3 3 1 3 1 2 3 3 3 3 3 3 3 3 2 2 3 2 3 3
 [75] 3 3 1 3 3 3 3 3 3 1 3 3 3 1 3 2 3 3 3 3 2 2 3 3 3 3 2 3 2 2 1 1 3 3 3 3 3
[112] 3 3 3 2 3 3 3 3 3 3 2 3 2 3 2 2 2 3 3 3 3 3 3 3 3 3 3 1 3 3 3 2 3 1 3 1 3
[149] 2 3 3 3 2 3 2 2 2 1 3 2 3 2 3 3 1 3 3 2 3 2 3 3 3 1 3 3 3 3 2 3 1 2 1 1 2
[186] 1 3 3 1 2 3 3 3 1 1 3 3 3 3 2
> print(result$Entropy)       # Final entropy
[1] 1.307743
> print(result$MutualInfo)    # Mutual information
[1] 0.0598887
> 
> 
> 
> cleanEx()
> nameEx("DIBcont")
> ### * DIBcont
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: DIBcont
> ### Title: Cluster Continuous Data Using the Deterministic Information
> ###   Bottleneck Algorithm
> ### Aliases: DIBcont
> ### Keywords: clustering
> 
> ### ** Examples
> 
> # Generate simulated continuous data
> set.seed(123)
> X <- matrix(rnorm(1000), ncol = 5)  # 200 observations, 5 features
> 
> # Run DIBcont with automatic bandwidth selection and multiple initializations
> result <- DIBcont(X = X, ncl = 3, s = -1, nstart = 50)
> 
> # Print clustering results
> print(result$Cluster)       # Cluster assignments
  [1] 2 2 2 3 2 2 1 3 3 1 1 1 2 1 2 3 1 3 1 2 1 3 2 3 1 2 1 1 1 2 3 1 2 3 1 1 1
 [38] 2 2 1 1 3 2 1 3 2 1 1 3 2 1 1 3 1 3 2 2 2 2 3 2 2 2 2 3 3 1 1 2 2 1 3 2 1
 [75] 3 3 3 3 3 1 1 2 1 3 3 1 1 2 1 1 2 2 2 3 3 2 2 1 2 3 1 1 1 3 3 2 1 3 2 2 3
[112] 2 1 1 2 2 3 1 2 3 1 3 1 3 1 3 2 2 3 2 2 1 1 2 1 1 1 1 2 3 2 2 2 2 1 1 2 3
[149] 2 2 2 1 1 2 1 2 2 3 1 3 2 3 2 1 2 2 2 1 2 2 3 1 2 1 3 2 1 1 2 1 3 2 2 1 3
[186] 2 2 1 1 3 2 1 2 1 1 2 3 2 1 1
> print(result$Entropy)       # Final entropy
[1] 1.557659
> print(result$MutualInfo)    # Mutual information
[1] 0.03239933
> 
> 
> 
> cleanEx()
> nameEx("DIBmix")
> ### * DIBmix
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: DIBmix
> ### Title: Deterministic Information Bottleneck Clustering for Mixed-Type
> ###   Data
> ### Aliases: DIBmix
> ### Keywords: clustering
> 
> ### ** Examples
> 
> # Example dataset with categorical, ordinal, and continuous variables
> data <- data.frame(
+   cat_var = factor(sample(letters[1:3], 100, replace = TRUE)),      # Nominal categorical variable
+   ord_var = factor(sample(c("low", "medium", "high"), 100, replace = TRUE),
+                    levels = c("low", "medium", "high"),
+                    ordered = TRUE),                                # Ordinal variable
+   cont_var1 = rnorm(100),                                          # Continuous variable 1
+   cont_var2 = runif(100)                                           # Continuous variable 2
+ )
> 
> # Perform Mixed-Type Clustering
> result <- DIBmix(X = data, ncl = 3, catcols = 1:2, contcols = 3:4)
> 
> # Print clustering results
> print(result$Cluster)       # Cluster assignments
  [1] 1 2 3 2 3 2 2 2 2 2 3 3 2 2 2 2 2 2 3 2 1 2 2 1 2 2 2 3 2 2 3 2 1 3 3 3 2
 [38] 3 2 2 1 2 2 2 2 3 2 2 2 2 2 2 2 1 3 2 3 2 2 3 2 2 1 2 3 3 2 2 2 2 2 2 1 3
 [75] 3 1 2 3 3 2 3 3 2 2 3 3 2 2 3 2 1 2 3 2 1 2 2 2 3 1
> print(result$Entropy)       # Final entropy
[1] 1.323467
> print(result$MutualInfo)    # Mutual information
[1] 0.8108685
> 
> 
> 
> cleanEx()
> nameEx("IBmix")
> ### * IBmix
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: IBmix
> ### Title: Information Bottleneck Clustering for Mixed-Type Data
> ### Aliases: IBmix
> ### Keywords: clustering
> 
> ### ** Examples
> 
> # Example dataset with categorical, ordinal, and continuous variables
> data <- data.frame(
+   cat_var = factor(sample(letters[1:3], 100, replace = TRUE)),      # Nominal categorical variable
+   ord_var = factor(sample(c("low", "medium", "high"), 100, replace = TRUE),
+                    levels = c("low", "medium", "high"),
+                    ordered = TRUE),                                # Ordinal variable
+   cont_var1 = rnorm(100),                                          # Continuous variable 1
+   cont_var2 = runif(100)                                           # Continuous variable 2
+ )
> 
> # Perform Mixed-Type Fuzzy Clustering
> result <- IBmix(X = data, ncl = 3, beta = 2, catcols = 1:2, contcols = 3:4)
> 
> # Print clustering results
> print(result$Cluster)       # Cluster membership matrix
             [,1]         [,2]        [,3]         [,4]        [,5]
[1,] 9.957171e-01 0.0021241444 0.879853005 1.054314e-04 0.830466848
[2,] 5.091100e-08 0.0004994358 0.005918342 5.626563e-05 0.007542246
[3,] 4.282891e-03 0.9973764198 0.114228653 9.998383e-01 0.161990906
             [,6]         [,7]         [,8]         [,9]       [,10]      [,11]
[1,] 0.0004027345 9.474909e-07 0.0001188858 0.0002969010 0.001168744 0.80883840
[2,] 0.0064125294 9.998284e-01 0.9843310751 0.0006852471 0.482220577 0.13903742
[3,] 0.9931847362 1.706849e-04 0.0155500391 0.9990178519 0.516610679 0.05212418
         [,12]        [,13]        [,14]        [,15]        [,16]        [,17]
[1,] 0.2353450 0.0002849611 3.571855e-05 0.0009064091 0.0003646783 0.0001835542
[2,] 0.1160838 0.9991146081 9.888089e-01 0.1503930143 0.0003007132 0.0032288981
[3,] 0.6485713 0.0006004309 1.115536e-02 0.8487005765 0.9993346085 0.9965875477
            [,18]      [,19]        [,20]        [,21]        [,22]
[1,] 0.0003011667 0.66160935 0.0002544972 0.9992539749 8.093018e-06
[2,] 0.9964667646 0.01953611 0.8127134389 0.0004716808 9.961509e-01
[3,] 0.0032320686 0.31885454 0.1870320640 0.0002743443 3.841038e-03
            [,23]        [,24]        [,25]      [,26]        [,27]
[1,] 0.0187584144 9.999998e-01 0.9506279161 0.01259771 0.0009030436
[2,] 0.0002859985 2.290000e-07 0.0489143153 0.72532026 0.7277783753
[3,] 0.9809555871 1.748648e-08 0.0004577686 0.26208203 0.2713185810
            [,28]        [,29]        [,30]        [,31]        [,32]
[1,] 0.7270285246 1.910386e-02 0.0003363444 0.2526837704 1.537306e-03
[2,] 0.0001670528 3.498823e-05 0.9972049656 0.0001798782 4.963874e-05
[3,] 0.2728044226 9.808612e-01 0.0024586900 0.7471363513 9.984131e-01
            [,33]        [,34]        [,35]       [,36]       [,37]       [,38]
[1,] 1.000000e+00 9.955712e-01 8.816138e-01 0.823095601 0.007586107 0.903159526
[2,] 8.089811e-09 2.793975e-06 3.096173e-05 0.004123946 0.341070351 0.002304091
[3,] 5.356108e-10 4.426020e-03 1.183553e-01 0.172780453 0.651343542 0.094536383
          [,39]        [,40]        [,41]       [,42]       [,43]       [,44]
[1,] 0.01314288 1.602792e-05 9.988073e-01 0.000419227 0.004567775 0.001059643
[2,] 0.50579559 9.984171e-01 6.188841e-09 0.864636413 0.940954785 0.942278483
[3,] 0.48106153 1.566824e-03 1.192667e-03 0.134944360 0.054477440 0.056661874
            [,45]      [,46]        [,47]      [,48]        [,49]        [,50]
[1,] 0.0001211781 0.78325776 2.202503e-07 0.03823459 0.0001747256 2.970439e-06
[2,] 0.9707756162 0.01511249 9.999191e-01 0.11537751 0.9970793414 9.980526e-01
[3,] 0.0291032057 0.20162975 8.065937e-05 0.84638790 0.0027459331 1.944434e-03
          [,51]        [,52]       [,53]        [,54]      [,55]       [,56]
[1,] 0.06421762 0.0002858459 0.004677909 9.416433e-01 0.41673818 0.009281608
[2,] 0.46300848 0.9977860956 0.350120362 7.601643e-07 0.51144488 0.942549272
[3,] 0.47277390 0.0019280585 0.645201729 5.835595e-02 0.07181695 0.048169120
            [,57]        [,58]     [,59]        [,60]      [,61]       [,62]
[1,] 0.1295092917 0.0006967365 0.0211921 0.9587272108 0.03505131 0.015369055
[2,] 0.0006187022 0.9378793419 0.5313382 0.0001265903 0.78065196 0.977072584
[3,] 0.8698720061 0.0614239216 0.4474697 0.0411461989 0.18429673 0.007558361
            [,63]       [,64]        [,65]        [,66]        [,67]
[1,] 9.999872e-01 0.002047985 9.149239e-01 9.979964e-01 7.122173e-06
[2,] 9.315712e-06 0.057564741 7.087767e-06 5.892431e-06 9.995622e-01
[3,] 3.506961e-06 0.940387274 8.506897e-02 1.997726e-03 4.306841e-04
           [,68]       [,69]        [,70]        [,71]        [,72]
[1,] 0.008885954 0.001407459 0.0001144956 3.468124e-06 0.0002783904
[2,] 0.982061533 0.981568803 0.9994109196 9.998172e-01 0.9296984952
[3,] 0.009052513 0.017023738 0.0004745848 1.793365e-04 0.0700231143
            [,73]       [,74]        [,75]        [,76]        [,77]
[1,] 9.885926e-01 0.797382207 0.8808064232 9.948174e-01 2.410855e-03
[2,] 1.258039e-07 0.001422198 0.0002686976 1.216324e-07 5.210581e-05
[3,] 1.140724e-02 0.201195595 0.1189248792 5.182513e-03 9.975370e-01
           [,78]      [,79]        [,80]      [,81]      [,82]        [,83]
[1,] 0.889342006 0.06360737 0.0022048309 0.93868689 0.21303090 3.971495e-06
[2,] 0.001347102 0.02948532 0.0005028331 0.01700106 0.05722531 9.997361e-01
[3,] 0.109310892 0.90690731 0.9972923360 0.04431205 0.72974379 2.598946e-04
           [,84]        [,85]        [,86]        [,87]        [,88]
[1,] 0.009467766 9.879023e-01 9.789673e-01 1.493262e-05 0.0041658324
[2,] 0.893704457 1.522989e-05 3.996523e-06 2.578428e-04 0.9948678976
[3,] 0.096827777 1.208248e-02 2.102873e-02 9.997272e-01 0.0009662701
            [,89]        [,90]        [,91]        [,92]     [,93]        [,94]
[1,] 0.9042280158 1.335356e-05 0.9984454153 0.0001724343 0.2109519 6.744130e-03
[2,] 0.0008239609 9.569498e-01 0.0012251529 0.9976368308 0.3373646 3.503238e-05
[3,] 0.0949480234 4.303681e-02 0.0003294319 0.0021907348 0.4516835 9.932208e-01
            [,95]        [,96]      [,97]        [,98]        [,99]
[1,] 9.997944e-01 4.309513e-06 0.06143027 0.0001649079 3.328603e-01
[2,] 1.920452e-04 9.973865e-01 0.07411545 0.0001533392 2.657483e-05
[3,] 1.354063e-05 2.609157e-03 0.86445428 0.9996817529 6.671131e-01
           [,100]
[1,] 9.999994e-01
[2,] 5.754918e-07
[3,] 6.487142e-08
> print(result$InfoXT)       # Mutual information between X and T
[1] 1.21766
> print(result$InfoYT)    # Mutual information between Y and T
[1] 0.9066839
> 
> 
> 
> ### * <FOOTER>
> ###
> cleanEx()
> options(digits = 7L)
> base::cat("Time elapsed: ", proc.time() - base::get("ptime", pos = 'CheckExEnv'),"\n")
Time elapsed:  19.27 0.17 20.99 NA NA 
> grDevices::dev.off()
null device 
          1 
> ###
> ### Local variables: ***
> ### mode: outline-minor ***
> ### outline-regexp: "\\(> \\)?### [*]+" ***
> ### End: ***
> quit('no')
